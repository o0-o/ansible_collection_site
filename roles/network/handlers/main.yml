---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible

- name: save site subnets var
  ansible.builtin.blockinfile:
    path: "{{ cwd }}/inventory/group_vars/{{ site_group }}.yml"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: Site Subnet"
    insertbefore: '# Add custom variables below:'
    block: |
      site_subnets:
        {{  site_subnets
            | to_nice_yaml(width=1023, indent=2)
            | indent(2)
            | trim }}
    backup: true
  delegate_to: 127.0.0.1
  when: site_subnets is defined
  listen: save net vars

- name: save site ips var
  ansible.builtin.blockinfile:
    path: "{{ cwd }}/inventory/group_vars/{{ site_group }}.yml"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: Site IPs"
    insertbefore: '# Add custom variables below:'
    block: |
      site_ips:
        {{  site_ips
            | to_nice_yaml(width=1023, indent=2)
            | indent(2)
            | trim }}
    backup: true
  delegate_to: 127.0.0.1
  when: site_ips is defined
  listen: save net vars

- name: save duid uuid var
  ansible.builtin.lineinfile:
    path: "{{ cwd }}/inventory/host_vars\
      /{{ update_hostname | default(inventory_hostname) }}.yml"
    line: "duid_uuid: {{ duid_uuid }}"
    regexp: '^#?duid_uuid:'
    insertbefore: '# Add custom variables below:'
    backup: true
  delegate_to: 127.0.0.1
  when: duid_uuid is defined
  listen: save host vars

- name: save phy ifaces var
  ansible.builtin.blockinfile:
    path: "{{ cwd }}/inventory/host_vars\
      /{{ update_hostname | default(inventory_hostname) }}.yml"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: Physical Network Interfaces"
    insertbefore: '# Add custom variables below:'
    block: |
      phy_ifaces:
        {{  phy_ifaces
            | to_nice_yaml(width=1023, indent=2)
            | indent(2)
            | trim }}
    backup: true
  delegate_to: 127.0.0.1
  when: phy_ifaces is defined
  listen: save host vars

- name: stop and disable ifupdown
  ansible.builtin.service:
    name: networking.service
    state: stopped
    enabled: false
  become: true

- name: restart network (openbsd)
  ansible.builtin.command:
    argv:
      - sh
      - /etc/netstart
  become: true
  when: ansible_system | lower == 'openbsd'
  listen: restart network

- name: restart network (networkmanager 1)
  ansible.builtin.service:
    name: NetworkManager
    state: restarted
  become: true
  when:
    - ansible_system | lower == 'linux'
    - net_ctl_srv == 'nm'
  listen:
    - restart network (networkmanager)
    - restart network

- name: restart network (networkmanager 2)
  ansible.builtin.shell:
    cmd: nmcli networking off && nmcli networking on
  become: true
  when:
    - ansible_system | lower == 'linux'
    - net_ctl_srv == 'nm'
  listen:
    - restart network (networkmanager)
    - restart network

- name: restart network (networkd)
  ansible.builtin.service:
    name: systemd-networkd
    state: restarted
  become: true
  when:
    - ansible_system | lower == 'linux'
    - net_ctl_srv == 'networkd'
  listen: restart network

- name: restart network (freebsd)
  ansible.builtin.command:
    argv:
      - service
      - netif
      - restart
  become: true
  when: ansible_system | lower == 'freebsd'
  listen: restart network

- name: restart routing (freebsd)
  ansible.builtin.command:
    argv:
      - service
      - routing
      - restart
  become: true
  when: ansible_system | lower == 'freebsd'
  listen:
    - restart network (freebsd)
    - restart network

- name: gather facts
  ansible.builtin.setup:
  listen: restart network
