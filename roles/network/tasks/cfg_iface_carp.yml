---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Configure CARP interfaces
#
# Documentation on CARP can be found here:
# https://man.openbsd.org/carp
# https://www.openbsd.org/faq/pf/carp.html
#
########################################################################

# Probe other hosts for the CARP password. Companion CARP interfaces
# should have the same name on their respective hosts.
# TODO: use slurp
- name: >-
    Attempt to retrieve the CARP password from other hosts
    {{ iface['dev'] }}
  ansible.builtin.command:
    cmd: "awk '/^pass / {print $2}' /etc/hostname.{{ iface['dev'] }}"
  register: retrieve_carp_pass
  changed_when: false
  failed_when: false
  ignore_errors: true
  ignore_unreachable: true
  delegate_to: "{{ carp_host_item }}"
  become: true
  loop: "{{ groups[site_group] }}"
  loop_control:
    loop_var: carp_host_item

# If a password is found, use it, otherwise generate one.
- name: >-
    Define CARP password for interface {{ iface['dev'] }} based on existing
    configuration
  ansible.builtin.set_fact:
    iface: "{{  iface | combine( { 'carp_pw': carp_pw_var } ) }}"
  vars:
    carp_pw_var: "{{  retrieve_carp_pass['results']
                      | selectattr('stdout', 'defined')
                      | map(attribute='stdout')
                      | unique
                      | first
                      | trim }}"
  register: def_carp_pass_reg
  when: retrieve_carp_pass['results']
        | selectattr('rc', 'defined')
        | selectattr('rc', '==', 0)
        != []

- name: Generate random CARP password
  ansible.builtin.set_fact:
    iface: "{{  iface | combine( { 'carp_pw': carp_pw_var } ) }}"
  vars:
    carp_pw_var: "{{  lookup( 'password',
                              '/dev/null chars=ascii_letters,digits' ) }}"
  when: def_carp_pass_reg is skipped

# Set the advskew based on the numerical suffix of the host name. If
# no numerical suffix esists, advskew will default to 0.
- name: "Set advskew to {{ advskew_var }} for {{ carp_var['dev'] }}"
  ansible.builtin.set_fact:
    iface: "{{ iface | combine( { 'advskew': advskew_var } ) }}"
  vars:
    advskew_var: "{{  short_hostname
                      | regex_search('[0-9]+$')
                      | int }}"

#  In case the address pool only has one viable IP, remove any pre-
#  configured address from the CARP parent interface
# - name: Remove any address on parent interface
#   ansible.builtin.shell:
#     cmd: >
#       ifconfig {{iface['dev']}} -inet ||
#       ip addr flush dev {{iface['dev']}}
#   become: yes

# Recursively call the cfg_iface.yml tasks to complete generic interface
# configuration tasks.
- name: "Configure CARP interface {{ carp_var['iface'] }}"
  ansible.builtin.include_tasks: cfg_iface.yml
