---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Determine the IP address based on network and group_vars
#
# By default, LAN interfaces are configured as 10.site.net.random/24.
# Collisions are avoided by tracking a list of used IPs. In the case of
# WAN, a list of usable IPs, a default route and subnet cidr should be
# provided in the net dict in group_vars. Addresses in the WAN pool are
# pinged to avoid collisions, so a host on the WAN subnet that is down
# or doesn't respond to echo requests does pose a collision risk. Please
# exclude those from the list of addresses in net[name]['addr'].
#
########################################################################

# Apply default subnet prefix of 24 unless using an address pool.
# Address pools do not have a default subnet prefix (an address pool
# in the absence of a prefix will fail).
- name: >-
    Interface {{ iface['dev'] }} has an IPv4 subnet prefix of
    {{ subnet_prefix_var }}
  ansible.builtin.set_fact:
    iface: "{{ iface | combine( { 'prefix4': subnet_prefix_var } ) }}"
  vars:
    subnet_prefix_var: 24
  when:
    - iface['subnet'] is defined

# Define the CIDR network address of the interface. If present, the
# address pool takes precedence, then subnet.
- name: >-
    The network address for interface {{ iface['dev'] }} is
    {{ subnet_addr_var }}
  ansible.builtin.set_fact:
    iface: "{{  iface
                | combine(  { 'subnet_addr':  subnet_addr_var } ) }}"
  vars:
    default_ip4_net_var: "{{  '10.'
                              + site['id'] | string
                              + '.'
                              + iface['subnet_id'] | default('1')
                              + '.0' }}"
    ipv4_addr_pool_var: "{{ iface['addr_pool']
                            | default([])
                            | ansible.netcommon.ipv4 }}"
    subnet_addr_var: "{{  ( ipv4_addr_pool_var[0]
                            | default(default_ip4_net_var)
                            + '/'
                            + iface['prefix4'] | string )
                          | ansible.netcommon.ipaddr('subnet') }}"

# If a valid address currently exists, use it.
- name: >-
    Interface {{ iface['dev'] }} is assigned an IPv4 address of {{ ip_var }}
    in subnet {{ iface['subnet'] }}
  ansible.builtin.set_fact:
    iface: "{{ iface | combine( { 'ip4': ip_var } ) }}"
  vars:
    subnet_var: "{{ iface['subnet'] }}"
    id_var: "{{ iface['dhcp_client_id'] }}"
    ip_var: "{{ site_ips[subnet_var][id_var]['ip4'] | default }}"
  when:
    - iface['subnet'] is defined
    - site_ips[subnet_var][id_var]['ip4'] is defined

- name: >-
    Interface {{ iface['dev'] }} has an IPv4 address of {{ ip_var }} which is
    within its address pool
  ansible.builtin.set_fact:
    iface: "{{ iface | combine( { 'ip4': ip_var } ) }}"
  vars:
    iface_var: "{{ vars[ 'ansible_' + iface['dev']] | default }}"
    ip_var: "{{ iface_var['ipv4'][0]['address']
                | default(iface_var['ipv4']['address'])
                | default }}"
  when:
    - iface['ip4'] is undefined
    - iface['addr_pool'] is defined
    - ip_var is in iface['addr_pool']

# Assign a random IPv4 address to the interface within the address pool
# or parameters of the subnet.
- name: "Assign an IPv4 address to {{ iface['dev'] }}"
  when: iface['ip4'] is undefined
  block:

    # The IPv4 address schema for a subnet is 10.site.subnet.host.
    # Corresponding ID numbers for site and subnet are used in the 2nd
    # and 3rd octet. A host address is randomly selected for the 4th
    # octet.

    # We use the integer representation of the IP address so that we can
    # use range to enumerate all usable host addresses which is then
    # differenced against the used IP list and finally a random IP is
    # chosen. However, if an address pool is present, an IPv4 address is
    # chosen at random from that list instead.
    - name: "An IPv4 address has been selected at random"
      ansible.builtin.set_fact:
        ip4_candidate: "{{ ip_var }}"
      vars:
        first_ip_int_var: "{{ iface['subnet_addr']
                              | ansible.netcommon.ipv4('next_usable')
                              | ansible.netcommon.ipv4('int') }}"
        last_ip_int_var: "{{  iface['subnet_addr']
                              | ansible.netcommon.ipv4('last_usable')
                              | ansible.netcommon.ipv4('int') }}"
        available_ips_var: "{{  iface['addr_pool']
                                | default(  range(  first_ip_int_var | int,
                                                    last_ip_int_var | int )
                                            | list )
                                | ansible.netcommon.ipv4
                                | difference( used_ip4s | default([]) ) }}"
        ip_var: "{{ available_ips_var | random }}"

    # Ping the chosen address from both host and localhost. If either
    # receive any response, add the IP to the used IPv4 list and include
    # this file recursively. Repeat until a valid IP is found or all
    # available IPs are exhausted.
    - name: Address collision tests (will re-attempt on failure)
      block:

        # NOTE: ping on some platforms format 100%, others 100.0%
        - name: "Ping {{ ip4_candidate }} from the host (collision test)"
          ansible.builtin.command:
            argv:
              - ping
              - -c
              - 2
              - "{{ ip4_candidate }}"
          register: host_ping_reg
          changed_when: false
          failed_when: not  host_ping_reg['stdout']
                            | regex_search('100.*% packet loss')

        - name: "Ping {{ ip4_candidate }} from localhost (collision test)"
          ansible.builtin.command:
            argv:
              - ping
              - -c
              - 2
              - "{{ ip4_candidate }}"
          register: localhost_ping_reg
          changed_when: false
          failed_when: not  localhost_ping_reg['stdout']
                            | regex_search('100.*% packet loss')
          delegate_to: 127.0.0.1

      rescue:

        - name: >-
            Collision was detected, adding {{ ip4_candidate }} to used IPv4
            list
          ansible.builtin.set_fact:
            used_ip4s: "{{ used_ip4s | union( [ip4_candidate] ) }}"

        - name: Increment recursion counter
          ansible.builtin.set_fact:
            def_iface_ip4_rec_count: "{{  def_iface_ip4_rec_count
                                          | default(1)
                                          | int
                                          + 1 }}"

        - name: >-
            Begin attempt {{ def_iface_ip4_rec_count }} to assign an IPv4
            address to {{ iface['dev'] }}
          ansible.builtin.include_tasks: def_iface_ip4.yml

    # The IP passed the collision tests and will be assigned to the
    # host. Add it to the used list, register it to the interface's
    # DHCP client identifier and add it to the interface definitions.
    - name: "Add {{ ip4_candidate }} to the used IPv4 list"
      ansible.builtin.set_fact:
        used_ip4s: "{{ used_ip4s | union( [ip4_candidate] ) }}"

    - name: "Register IPv4 assignment for {{ ip4_candidate }}"
      ansible.builtin.set_fact:
        site_ips: >-
          {{  site_ips
              | combine(  { subnet_var: subnet_assignments_var },
                          recursive=true ) }}
      changed_when: true
      run_once: true
      vars:
        subnet_var: "{{ iface['subnet'] }}"
        client_id_var: "{{ iface['dhcp_client_id'] }}"
        assign_var: "{{ { client_id_var: { 'ip4': ip4_candidate } } }}"
        subnet_assignments_var: >-
          {{  site_ips[subnet_var]
              | combine( assign_var, recursive=true ) }}
      when: iface['subnet'] is defined
      notify: save site ips var

    - name: "Assign {{ ip4_candidate }} to {{ iface['dev'] }}"
      ansible.builtin.set_fact:
        iface: "{{ iface | combine( { 'ip4': ip4_candidate} ) }}"
