---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Define an interface
#
########################################################################

# Define the interface based on the first available definition.
# Precedence follows CARP, VLAN, virtual and then physical interface.
- name: "Define interface {{ iface_var['dev'] }}"
  ansible.builtin.set_fact:
    iface: "{{ iface_var }}"
  vars:
    iface_var: "{{  carp_var
                    | default(vlan_var)
                    | default(virt_iface_var)
                    | default(phy_iface_item) }}"

# Define the MTU of the interface. If MTU is set in the interface
# definition, honor it, but if MTU is undefined, the largest value is
# taken across all subnets and vlans on that interface.
- name: "The MTU of {{iface['dev']}} is {{mtu_var}}"
  ansible.builtin.set_fact:
    iface: "{{  iface | combine(  { 'mtu': mtu_var } ) }}"
  vars:
    vlans_var: "{{ iface['vlans'] | default([]) }}"
    mtu_sources_var: "{{ iface['subnet'] is defined
                              | ternary(  vlans_var + [ iface['subnet'] ],
                                          vlans_var ) }}"
    mtu_list_var: "{{ mtu_sources_var
                      | map('extract', site_subnets, 'mtu')
                      | select('defined')
                      | map('int') }}"
    mtu_var: "{{ iface['mtu'] | default( mtu_list_var | max ) }}"
  when:
    - iface['vlans'] is defined
    - iface['vlans'] != []
    - mtu_list_var != []

# Apply subnet definitions to the interface. Interface definitions take
# precendence.
- name: >-
    Apply subnet {{ iface['subnet'] }} configuration to {{ iface['dev'] }}
  ansible.builtin.set_fact:
    iface: "{{ subnet_var | combine(iface, recursive=true) }}"
  vars:
    subnet_var: "{{ site_subnets[ iface['subnet'] ] }}"
  when: iface['subnet'] is defined

# MAC address randomization is true by default.
- name: >-
    MAC Address randomization is
    {{ rand_mac_var | ternary('enabled', 'disabled') }} on {{ iface['dev'] }}
  ansible.builtin.set_fact:
    iface: "{{  iface
                | combine(  { 'rand_mac': rand_mac_var } ) }}"
  vars:
    rand_mac_var: "{{ iface['rand_mac'] | default(true) }}"


# 5.  DHCP is true by default if the subnet is defined and no address
#     pool is defined. Otherwise, it is false by default.
- name: >-
    IPv4 DHCP is {{ dhcp4_var | ternary('enabled', 'disabled') }} on
    {{ iface['dev'] }}
  ansible.builtin.set_fact:
    iface: "{{  iface
                | combine(  { 'dhcp4': dhcp4_var } ) }}"
  register: iface_dhcp4_reg
  vars:
    dhcp4_var: "{{ iface['dhcp4'] | default(true) }}"
  when:
    - iface['subnet'] is defined
    - iface['addr_pool'] is undefined

- name: >-
    IPv4 DHCP is {{ dhcp4_var | ternary('enabled', 'disabled') }} on
    {{ iface['dev'] }}
  ansible.builtin.set_fact:
    iface: "{{  iface
                | combine(  { 'dhcp4': dhcp4_var } ) }}"
  vars:
    dhcp4_var: "{{ iface['dhcp4'] | default(false) }}"
  when: iface_dhcp4_reg is skipped

# TODO: Always set DHCP to false on an interface that is serving dhcp


# Generate an IAID for the interface. RFC 4361 advocates for IAID/DUID
# use in DHCPv4. No specific method for generating the IAID is
# specified, other than it be unique, persistent and 32 bits. We use a
# truncated SHA256 hash of the DUID plus the hardware MAC address, or if
# the interface is virtual and doesn't have a hardware address, we use
# the interface name (dev).
- name: "The IAID for {{ iface['dev'] }} is {{ iaid_var }}"
  ansible.builtin.set_fact:
    iface: "{{  iface
                | combine( { 'iaid': iaid_var } ) }}"
  vars:
    iaid_var: "{{ ( ( duid_uuid
                      + iface['hw_addr'] | default(iface['dev']) )
                    | hash('sha256') )[:8]
                  | regex_findall('..')
                  | join(':') }}"

# Set the DHCP client identifier. If MAC address is randomized, use IAID
# + DUID, otherwise, use the hardware MAC address.
- name: "The DHCP client identifier for {{ iface['dev'] }} is {{ id_var }}"
  ansible.builtin.set_fact:
    iface: "{{  iface
                | combine( { 'dhcp_client_id': client_id_var } ) }}"
  vars:
    iaid_duid_var: "{{  ( [ iface['iaid'] ] + ['00:04'] + [duid_uuid] )
                        | join(':') }}"
    client_id_var: >-
      {{  iface['rand_mac']
          | ternary(  iaid_duid_var,
                      iface['hw_addr'] | default(iaid_duid_var) ) }}

# If the OS is OpenBSD or FreeBSD, let iface['carp'] determine if CARP
# will be configured. Otherwise, don't because it's unsupported. This
# allows us to enable CARP at a subnet level without worrying about it
# failing on unsupported systems.
- name: >-
    CARP is {{ carp_enable_var | ternary('enabled', 'disabled') }} on
    {{ iface['dev'] }}
  ansible.builtin.set_fact:
    iface: "{{  iface
                | combine( { 'carp': carp_enable_var } ) }}"
  vars:
    prelim_carp_enable_var: "{{ iface['type'] != 'carp'
                                and iface['carp'] | default(false) }}"
    carp_enable_var: "{{  ( ansible_system | lower in ['openbsd', 'freebsd'] )
                          | ternary(prelim_carp_enable_var, false) }}"

# Format routes. This allows us to use the word 'default' instead of
# 0.0.0.0/0 in the subnet or interface definitions in the inventory.

# TODO: regex_replace('default', '0.0.0.0/0')
