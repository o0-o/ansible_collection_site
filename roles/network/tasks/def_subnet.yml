---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Define subnets and used IP address list
#
# Assign subnets a random ID if they are missing one and initialize the
# IP address list.
#
########################################################################

- name: "Assign a random ID to the subnet {{ subnet_name_item }}"
  ansible.builtin.set_fact:
    site_subnets: >-
      {{  site_subnets | combine( subnet_dict_var, recursive=true ) }}
  changed_when: true
  vars:
    used_subnet_ids_var: "{{  site_subnets.keys()
                              | list
                              | map('extract', site_subnets, 'subnet_id')
                              | select('defined') }}"
    rand_id_var: "{{  range(2, 256)
                      | list
                      | difference(used_subnet_ids_var)
                      | random }}"
    id_dict_var: "{{ { 'subnet_id': rand_id_var } }}"
    subnet_dict_var: "{{ { subnet_name_item: id_dict_var } }}"
  when: site_subnets[subnet_name_item]['subnet_id'] is undefined
  notify: save site subnets var

- name: "Define IP address dictionary for subnet {{ subnet_name_item }}"
  ansible.builtin.set_fact:
    site_ips: "{{ site_ips
                  | default({})
                  | combine(subnet_ips_var) }}"
  vars:
    ips_var: "{{ site_ips[subnet_name_item] | default({}) }}"
    subnet_ips_var: "{{ { subnet_name_item: ips_var } }}"
