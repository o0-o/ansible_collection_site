---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Determine the IP address based on network and group_vars
#
# By default, LAN interfaces are configured as 10.site.net.random/24.
# Collisions are avoided by tracking a list of used IPs. In the case of
# WAN, a list of usable IPs, a default route and subnet cidr should be
# provided in the net dict in group_vars. Addresses in the WAN pool are
# pinged to avoid collisions, so a host on the WAN subnet that is down
# or doesn't respond to echo requests does pose a collision risk. Please
# exclude those from the list of addresses in net[name]['addr'].
#
########################################################################

- name: Enumerate IPs already in use
  block:

  - name: Used IP list has already been generated
    ansible.builtin.assert:
      that: used_ips is defined
      quiet: true

  rescue:

  - name: Get facts from all gateways
    ansible.builtin.setup:
      filter:
      - 'all_ipv4_addresses'
    delegate_to: "{{host_item}}"
    ignore_errors: true
    when: hostvars[host_item] is undefined
    loop: "{{groups['all']}}"
    loop_control:
      loop_var: host_item

  - name: Enumerate used IP addresses
    ansible.builtin.set_fact:
      used_ips: "{{ groups['all']
                    | map('extract', hostvars, 'ansible_all_ipv4_addresses')
                    | list
                    | select('defined')
                    | flatten
                    | unique }}"

- block:
  - block:
    - block:

      - name: "No network is defined for {{current_iface['dev']}}"
        ansible.builtin.assert:
          that: current_iface['net'] is undefined
          quiet: true

      rescue:

      - name: "{{current_iface['dev']}} is configured to use DHCP"
        ansible.builtin.assert:
          that: current_net['addr'][0] | default() == 'dhcp'

      - name: Use DHCP
        ansible.builtin.set_fact:
          current_iface_ip: 'dhcp'

    rescue:

    - name: "The {{current_iface['dev']}} has an IP address"
      ansible.builtin.assert:
        that: current_iface_ip != ''
        quiet: true

    - name: "The {{current_iface_ip}} is valid in {{current_iface['net']}}"
      ansible.builtin.assert:
        that: >
          current_iface_ip in current_net['addr'] | default([]) or
          current_net_addr
          | ansible.netcommon.network_in_usable(current_iface_ip)
        quiet: true

    - name: "Add {{current_iface_ip}} to list of used IPs"
      ansible.builtin.set_fact:
        used_ips: "{{ used_ips
                      | default(ansible_all_ipv4_addresses)
                      | union([current_iface_ip]) }}"

  rescue:

  - name: "Build list of usable IP addresses in {{current_net_addr}}"
    ansible.builtin.set_fact:
      available_ips: "{{  current_net['addr']
                          | default(  range(  first_ip_int | int,
                                              last_ip_int | int )
                                      | map('ansible.netcommon.ipaddr') )
                          | difference( used_ips | default([]) ) }}"
    vars:
      first_ip_int: "{{ current_net_addr
                        | ansible.netcommon.ipaddr('next_usable')
                        | ansible.netcommon.ipaddr('int') }}"
      last_ip_int: "{{  current_net_addr
                        | ansible.netcommon.ipaddr('last_usable')
                        | ansible.netcommon.ipaddr('int') }}"

  - name: Test public IPs
    ansible.builtin.shell:
      cmd: "! ping -c 2 {{ip_item}} 1>/dev/null || echo {{ip_item}}"
    register: public_ips_in_use_reg
    changed_when: false
    loop: "{{ available_ips | ansible.netcommon.ipaddr('public') }}"
    loop_control:
      loop_var: ip_item

  - name: Exclude reachable public IPs from usable pool
    ansible.builtin.set_fact:
      available_ips: "{{  available_ips
                          | difference( public_ips_in_use_reg['results']
                                        | map(attribute='stdout') ) }}"
    when: not public_ips_in_use_reg['skipped']

  - name: >
      Assign {{ip}} to {{current_iface['dev']}} in the
      {{ current_iface['net'] | upper }} network
    ansible.builtin.set_fact:
      current_iface_ip: "{{ip}}"
    changed_when: true
    vars:
      ip: "{{ available_ips | random(seed=current_iface['dev']) }}"
    notify: restart network

  - name: Sanity check IP
    ansible.builtin.assert:
      that: current_iface_ip | ansible.netcommon.ipaddr
      quiet: true
