---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible
#
# Configure a network interface on Linux with NetworkManager
#
# Documentation on nmcli can be found here:
# https://networkmanager.dev/docs/api/latest/nm-settings-nmcli.html
#
########################################################################

- name: >-
    Name the NetworkManager connection after the hardware address
    {{ nm_con_name_var }}
  ansible.builtin.set_fact:
    nm_con_name: "{{ nm_con_name_var }}"
  vars:
    nm_con_name_var: "{{  iface['hw_addr']
                          | default(iface['dev'])
                          | regex_replace(':', '-') }}"

- name: "Check if the connection {{ nm_con_name }} exists"
  ansible.builtin.command:
    argv:
      - nmcli
      - connection
      - show
      - "{{ nm_con_name }}"
  changed_when: false
  failed_when: false
  register: nm_con_show_reg
  become: true

# Don't delete any extant connections until new connection is
# configured.
- name: List existing connections
  ansible.builtin.command:
    argv:
      - nmcli
      - --get-values
      - uuid,device
      - connection
      - show
  changed_when: false
  become: true
  register: nm_con_uuid_dev_reg
  when: nm_con_show_reg['rc'] != 0

- name: Define the connection type as ethernet (physical interface)
  ansible.builtin.set_fact:
    nm_iface_type: ethernet
  when: iface['type'] == 'phy'

- name: Define the connection type as VLAN
  ansible.builtin.set_fact:
    nm_iface_type: vlan
  when: iface['type'] == 'vlan'

- name: Define formatted interface name for task names
  ansible.builtin.set_fact:
    nm_name_pretty: "{{ ( iface['dev'] == nm_con_name )
                        | ternary(  iface['dev'],
                                    iface['dev']
                                    + ' ('
                                    + nm_con_name
                                    + ')' ) }}"

# The nmcli module seems insistent that certain parameters are set in
# the presence of others, so in order to gradually build the
# configuration, we have to build the command and then execute it. This
# is not recommended by Ansible because set_fact can be overridden in
# variable precedence. We can protect against that with the assert task
# below.

- name: >-
    Test that we have control of the the nm_task variable by assigning it a
    benign value
  ansible.builtin.set_fact:
    nm_task: {}

- name: Confirm nm_task has that value
  ansible.builtin.assert:
    that: nm_task == {}
    quiet: true
    fail_msg: >
      The variable nm_tasks has been overriden (potentially maliciously).

- name: >-
    Define the basic community.general.nmcli task for {{ nm_name_pretty }}
  ansible.builtin.set_fact:
    nm_task:
      conn_name: "{{ nm_con_name }}"
      type: "{{ nm_iface_type }}"
      method6: ignore
      autoconnect: true
      state: present

- name: Confirm nm_task has changed
  ansible.builtin.assert:
    that: nm_task != {}
    quiet: true
    fail_msg: >
      The variable nm_tasks has been overriden (potentially maliciously).

- name: "Define the name of a physical interface {{ nm_name_pretty }}"
  ansible.builtin.set_fact:
    nm_task: "{{  nm_task
                  | combine( { 'ifname': iface['dev'] } ) }}"
  when: iface['type'] == 'phy'

- name: "Define the VLAN device and ID of {{ nm_name_pretty }}"
  ansible.builtin.set_fact:
    nm_task: "{{  nm_task
                  | combine( {  'vlandev': phy_iface_item['dev'],
                                'vlanid': iface['subnet_id'] } ) }}"
  when: iface['type'] == 'vlan'

- name: "Interface {{ nm_name_pretty }} has no ipv4 address"
  ansible.builtin.set_fact:
    nm_task: "{{  nm_task
                  | combine( { 'method4': 'disabled' } ) }}"
  when:
    - iface['ip4'] is undefined or iface['prefix4'] is undefined
    - not iface['dhcp4']

- name: "Interface {{ nm_name_pretty }} is configured to use DHCP"
  ansible.builtin.set_fact:
    nm_task: "{{  nm_task
                  | combine( {  'method4': 'auto',
                                'dhcp_client_id': id_var } ) }}"
  vars:
    id_var: "{{ 'ff:' + iface['dhcp_client_id'] }}"
  when: iface['dhcp4']

- name: >-
    Interface {{ nm_name_pretty }} has an IPv4 address of {{ iface['ip4'] }}
  ansible.builtin.set_fact:
    nm_task: "{{  nm_task
                  | combine( {  'method4': 'manual',
                                'ip4': cidr_var } ) }}"
  vars:
    cidr_var: "{{ iface['ip4'] }}/{{ iface['prefix4'] }}"
  when:
    - not iface['dhcp4']
    - iface['ip4'] is defined
    - iface['prefix4'] is defined

- name: "Interface {{ nm_name_pretty }} has IPv4 routes"
  ansible.builtin.set_fact:
    nm_task: "{{  nm_task
                  | combine( { 'routes4': routes4_var } ) }}"
  vars:
    routes4_var: "{{  iface['routes'].keys()
                      | zip( iface['routes'].values() )
                      | map('ansible.netcommon.ipv4')
                      | map('join', ' ') }}"
  when:
    - iface['routes'] is defined
    - routes4_var != []

- name: Interface {{ nm_name_pretty }} has an MTU of {{ iface['mtu'] }}
  ansible.builtin.set_fact:
    nm_task: "{{  nm_task
                  | combine( { 'mtu': iface['mtu'] } ) }}"
  when: iface['mtu'] is defined

- name: >-
    Run the NetworkManager task to configure interface {{ nm_name_pretty }}
  community.general.nmcli: "{{ nm_task }}"
  become: true

# The nmcli module only allows random mac on wifi type interfaces so
# we configure it manually.
- name: "Get MAC Address configuration for {{ nm_name_pretty }}"
  ansible.builtin.command:
    argv:
      - nmcli
      - --get-values
      - 802-3-ethernet.cloned-mac-address
      - connection
      - show
      - "{{ nm_con_name }}"
  become: true
  register: mac_addr_rand_reg
  changed_when: false

- name: "Configure {{ nm_name_pretty }} with a random MAC address"
  ansible.builtin.command:
    argv:
      - nmcli
      - connection
      - modify
      - "{{ nm_con_name }}"
      - 802-3-ethernet.cloned-mac-address
      - "{{ mac_addr_var }}"
  become: true
  vars:
    mac_addr_var: "{{ iface['rand_mac'] | ternary('random', 'permanent') }}"
  when:
    - not ansible_check_mode
    - mac_addr_rand_reg['stdout_lines'][0] | default != mac_addr_var
  notify: restart network (networkmanager)

# The nmcli module does not allow configuring dhcp-send-hostname so we
# configure it manually.
- name: "Get dhcp-send-hostname configuration for {{ nm_name_pretty }}"
  ansible.builtin.command:
    argv:
      - nmcli
      - --get-values
      - ipv4.dhcp-send-hostname
      - connection
      - show
      - "{{ nm_con_name }}"
  become: true
  register: dhcp_send_hostname_reg
  changed_when: false

- name: "Configure {{ nm_name_pretty }} not to send hostname in DHCP request"
  ansible.builtin.command:
    argv:
      - nmcli
      - connection
      - modify
      - "{{ nm_con_name }}"
      - ipv4.dhcp-send-hostname
      - false
  become: true
  when:
    - not ansible_check_mode
    - dhcp_send_hostname_reg['stdout_lines'][0] | default != 'no'
  notify: restart network (networkmanager)

- name: "Delete any conflicting connections on device {{ iface['dev'] }}"
  ansible.builtin.command:
    argv:
      - nmcli
      - connection
      - delete
      - "{{ con_item }}"
  become: true
  loop: "{{ nm_con_uuid_dev_reg['stdout_lines']
            | default([])
            | map('lower')
            | select('match', '^.*:' + iface['dev'] + '$')
            | map('split', ':')
            | map('first') }}"
  loop_control:
    loop_var: con_item
  notify: restart network (networkmanager)
