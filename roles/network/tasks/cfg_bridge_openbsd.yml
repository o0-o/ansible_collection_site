---
# vim: ts=2:sw=2:sts=2:et:ft=yaml.ansible:noai
#
# Configure a network bridge on OpenBSD
#
# NOTE: Bridges are very unstable on OpenBSD during initial testing in a
# virtual environment. Avoding MAC address randomization on bridge
# member ports seems to help, but the system will eventually become
# unresponsive regardless. Further testing is needed on bare metal.
# The very new veb(4) implementation may be a better long term solution
# but VLAN support is currently broken in OpenBSD 7. It should be fixed
# in OpenBSD 7.1.
#
########################################################################

# Bridges in OpenBSD require a virtual interface.
- name: >-
    Define the virtual ethernet interface {{ virt_dev_var }} for bridge
    {{ bridge_dev }}
  ansible.builtin.set_fact:
    virt_iface:
      dev: "{{ virt_dev_var }}"
      type: virt
      rand_mac: false
  vars:
    virt_dev_var: "vether{{ site_subnets[bridge_net_item]['subnet_id'] }}"

# Since the VLAN should aleady have an address, only give the virtual
# interface an address if no VLAN is in the bridge.
- name: "Assign {{ virt_iface['dev'] }} to subnet {{ bridge_net_item }}"
  ansible.builtin.set_fact:
    virt_iface: "{{ virt_iface
                    | combine( { 'subnet': bridge_net_item } ) }}"
  when: bridge_members | select('match', '^vlan[0-9]*$') | length == 0

# Reuse cfg_iface.yml to configure the virtual interface.
- name: "Configure virtual ethernet interface {{ virt_iface['dev'] }}"
  ansible.builtin.include_tasks: cfg_iface.yml
  vars:
    virt_iface_var: "{{ virt_iface }}"

- name: "Add interface {{ virt_iface['dev'] }} to bridge {{ bridge_dev }}"
  ansible.builtin.set_fact:
    bridge_members: "{{ bridge_members | union( [ iface['dev'] ] ) }}"

- name: "Configure the hostname.{{ bridge_dev }} file"
  ansible.builtin.template:
    src: openbsd/hostname.bridge.j2
    dest: "/etc/hostname.{{ bridge_dev }}"
    owner: root
    group: wheel
    mode: 0640
    backup: true
  become: true
  notify: restart network (openbsd)
